
Within this folder you should find three Python files deomonstrating some simple network communication.
The first of these will run a client that will send a message across a network and wait for a response.
It can be run using the command:
   
   Python3 client.py

If you do not run the server first. Your client will not work as it has nothing to connect to. 
There are two options or running a server process. First is server_socket.py, which uses the socket 
library to listen for inbound cimmunications and then echo them back. It can be started with:

    Python3 server_socket.py ServerName

Finally is server_socketserver.py. This is a more robust server implementation using the socketserver 
library. This library builds upon the socket library to provide robust base implementations for servers
and is the defacto library for implementing them in Python. If we were limited to using C we would
have to stick with using base socket programming, but this can get tedious and is more prone to errors.
To start server_socketserver.py we can type:

    Python3 server_socketserver.py ServerName

You can stop the server by hitting Ctrl+C. Note that here we give the server a name. This is not necessary
for servers usually, but has been provided here as an example of how we can define certain characteristics
of out server from command line arguments.

Your task at this exercise is to familiarise with Python, or brush up on your skills before A3 as 
it is a Python based network programming task. Initially you should investigate server_socket.py. 

    1) Start multiple clients each connecting to the same server_socket at the same time. You may need to 
       add a delay to the message processing to be able to do this. What happens when a message is
       recieved before the previous one is completed? What effect might this have on server performance? 
       What effect would it have on client performance?
       
You should now investigate server_socketserver.py. 

    2) Add delays in the same manner as before and connect multiple clients. What happens here? How would
       This alter performance for the client and server compared to the server_socket?
    
Continue to investigate server_socketserver. Make sure to remove any delaying timers from the last exercise
as they will just slow things down unnecessarily for these subsequent parts.
 
    3) Modify the code so that the IP and port for the server to run on, and the client to connect 
       to are passed as arguments, in the same manner as the server name.
    4) Process the message recieved by the server. Users should be able to send a message saying 
       'NAME=NEW-NAME'. This should alter the name of the server to NEW-NAME. 
